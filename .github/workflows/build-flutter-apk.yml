# .github/workflows/build-flutter-apk.yml

name: Build Flutter Android APK

on:
  # 允许在 Actions 标签页手动触发此工作流
  workflow_dispatch:

  # 当有代码推送到 main 分支时自动触发
  push:
    branches:
      - main # 或者你的主分支名，比如 master

jobs:
  build:
    name: Build Flutter (Debug APK)
    # 使用最新的 Ubuntu 虚拟机环境
    runs-on: ubuntu-latest

    steps:
      # 1. 检出你的项目代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. 设置 Java 环境 (Android 构建所必需)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. 设置 Flutter 环境
      # 这是最关键的一步，使用社区维护的优秀 action 来安装 Flutter SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # 使用稳定版的 Flutter SDK
          cache: true       # 启用缓存以加快后续构建速度

      # 4. 获取项目依赖
      # 相当于在本地运行 `flutter pub get`
      - name: Get Flutter dependencies
        run: flutter pub get

      # (可选，但推荐) 5. 检查代码格式和静态分析
      # 确保代码质量，如果检查不通过，构建会失败
      - name: Analyze project source
        run: flutter analyze

      # (可选，但推荐) 6. 运行测试
      # - name: Run widget tests
      #   run: flutter test

      # 7. 构建 Debug APK
      # Flutter 的构建命令非常直接
      - name: Build debug APK
        run: flutter build apk --debug

      # 8. 上传构建好的 APK 文件作为产物 (Artifact)
      # 这样你就可以在工作流运行结束后下载它
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: build/app/outputs/apk/debug/app-debug.apk
